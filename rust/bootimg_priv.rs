// Copyright 2024, The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#![allow(unused)]
#![allow(non_camel_case_types)]

use zerocopy::{FromBytes, Immutable, IntoBytes, KnownLayout};

/* automatically generated by rust-bindgen 0.70.1 */

pub const BOOT_MAGIC: &[u8; 9] = b"ANDROID!\0";
pub const BOOT_MAGIC_SIZE: u32 = 8;
pub const BOOT_NAME_SIZE: u32 = 16;
pub const BOOT_ARGS_SIZE: u32 = 512;
pub const BOOT_EXTRA_ARGS_SIZE: u32 = 1024;
pub const VENDOR_BOOT_MAGIC: &[u8; 9] = b"VNDRBOOT\0";
pub const VENDOR_BOOT_MAGIC_SIZE: u32 = 8;
pub const VENDOR_BOOT_ARGS_SIZE: u32 = 2048;
pub const VENDOR_BOOT_NAME_SIZE: u32 = 16;
pub const VENDOR_RAMDISK_TYPE_NONE: u32 = 0;
pub const VENDOR_RAMDISK_TYPE_PLATFORM: u32 = 1;
pub const VENDOR_RAMDISK_TYPE_RECOVERY: u32 = 2;
pub const VENDOR_RAMDISK_TYPE_DLKM: u32 = 3;
pub const VENDOR_RAMDISK_NAME_SIZE: u32 = 32;
pub const VENDOR_RAMDISK_TABLE_ENTRY_BOARD_ID_SIZE: u32 = 16;
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct boot_img_hdr_v0 {
    pub magic: [u8; 8usize],
    pub kernel_size: u32,
    pub kernel_addr: u32,
    pub ramdisk_size: u32,
    pub ramdisk_addr: u32,
    pub second_size: u32,
    pub second_addr: u32,
    pub tags_addr: u32,
    pub page_size: u32,
    pub header_version: u32,
    pub os_version: u32,
    pub name: [u8; 16usize],
    pub cmdline: [u8; 512usize],
    pub id: [u32; 8usize],
    pub extra_cmdline: [u8; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of boot_img_hdr_v0"][::core::mem::size_of::<boot_img_hdr_v0>() - 1632usize];
    ["Alignment of boot_img_hdr_v0"][::core::mem::align_of::<boot_img_hdr_v0>() - 1usize];
    ["Offset of field: boot_img_hdr_v0::magic"]
        [::core::mem::offset_of!(boot_img_hdr_v0, magic) - 0usize];
    ["Offset of field: boot_img_hdr_v0::kernel_size"]
        [::core::mem::offset_of!(boot_img_hdr_v0, kernel_size) - 8usize];
    ["Offset of field: boot_img_hdr_v0::kernel_addr"]
        [::core::mem::offset_of!(boot_img_hdr_v0, kernel_addr) - 12usize];
    ["Offset of field: boot_img_hdr_v0::ramdisk_size"]
        [::core::mem::offset_of!(boot_img_hdr_v0, ramdisk_size) - 16usize];
    ["Offset of field: boot_img_hdr_v0::ramdisk_addr"]
        [::core::mem::offset_of!(boot_img_hdr_v0, ramdisk_addr) - 20usize];
    ["Offset of field: boot_img_hdr_v0::second_size"]
        [::core::mem::offset_of!(boot_img_hdr_v0, second_size) - 24usize];
    ["Offset of field: boot_img_hdr_v0::second_addr"]
        [::core::mem::offset_of!(boot_img_hdr_v0, second_addr) - 28usize];
    ["Offset of field: boot_img_hdr_v0::tags_addr"]
        [::core::mem::offset_of!(boot_img_hdr_v0, tags_addr) - 32usize];
    ["Offset of field: boot_img_hdr_v0::page_size"]
        [::core::mem::offset_of!(boot_img_hdr_v0, page_size) - 36usize];
    ["Offset of field: boot_img_hdr_v0::header_version"]
        [::core::mem::offset_of!(boot_img_hdr_v0, header_version) - 40usize];
    ["Offset of field: boot_img_hdr_v0::os_version"]
        [::core::mem::offset_of!(boot_img_hdr_v0, os_version) - 44usize];
    ["Offset of field: boot_img_hdr_v0::name"]
        [::core::mem::offset_of!(boot_img_hdr_v0, name) - 48usize];
    ["Offset of field: boot_img_hdr_v0::cmdline"]
        [::core::mem::offset_of!(boot_img_hdr_v0, cmdline) - 64usize];
    ["Offset of field: boot_img_hdr_v0::id"]
        [::core::mem::offset_of!(boot_img_hdr_v0, id) - 576usize];
    ["Offset of field: boot_img_hdr_v0::extra_cmdline"]
        [::core::mem::offset_of!(boot_img_hdr_v0, extra_cmdline) - 608usize];
};
impl Default for boot_img_hdr_v0 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type boot_img_hdr = boot_img_hdr_v0;
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct boot_img_hdr_v1 {
    pub _base: boot_img_hdr_v0,
    pub recovery_dtbo_size: u32,
    pub recovery_dtbo_offset: u64,
    pub header_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of boot_img_hdr_v1"][::core::mem::size_of::<boot_img_hdr_v1>() - 1648usize];
    ["Alignment of boot_img_hdr_v1"][::core::mem::align_of::<boot_img_hdr_v1>() - 1usize];
    ["Offset of field: boot_img_hdr_v1::recovery_dtbo_size"]
        [::core::mem::offset_of!(boot_img_hdr_v1, recovery_dtbo_size) - 1632usize];
    ["Offset of field: boot_img_hdr_v1::recovery_dtbo_offset"]
        [::core::mem::offset_of!(boot_img_hdr_v1, recovery_dtbo_offset) - 1636usize];
    ["Offset of field: boot_img_hdr_v1::header_size"]
        [::core::mem::offset_of!(boot_img_hdr_v1, header_size) - 1644usize];
};
impl Default for boot_img_hdr_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct boot_img_hdr_v2 {
    pub _base: boot_img_hdr_v1,
    pub dtb_size: u32,
    pub dtb_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of boot_img_hdr_v2"][::core::mem::size_of::<boot_img_hdr_v2>() - 1660usize];
    ["Alignment of boot_img_hdr_v2"][::core::mem::align_of::<boot_img_hdr_v2>() - 1usize];
    ["Offset of field: boot_img_hdr_v2::dtb_size"]
        [::core::mem::offset_of!(boot_img_hdr_v2, dtb_size) - 1648usize];
    ["Offset of field: boot_img_hdr_v2::dtb_addr"]
        [::core::mem::offset_of!(boot_img_hdr_v2, dtb_addr) - 1652usize];
};
impl Default for boot_img_hdr_v2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct boot_img_hdr_v3 {
    pub magic: [u8; 8usize],
    pub kernel_size: u32,
    pub ramdisk_size: u32,
    pub os_version: u32,
    pub header_size: u32,
    pub reserved: [u32; 4usize],
    pub header_version: u32,
    pub cmdline: [u8; 1536usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of boot_img_hdr_v3"][::core::mem::size_of::<boot_img_hdr_v3>() - 1580usize];
    ["Alignment of boot_img_hdr_v3"][::core::mem::align_of::<boot_img_hdr_v3>() - 1usize];
    ["Offset of field: boot_img_hdr_v3::magic"]
        [::core::mem::offset_of!(boot_img_hdr_v3, magic) - 0usize];
    ["Offset of field: boot_img_hdr_v3::kernel_size"]
        [::core::mem::offset_of!(boot_img_hdr_v3, kernel_size) - 8usize];
    ["Offset of field: boot_img_hdr_v3::ramdisk_size"]
        [::core::mem::offset_of!(boot_img_hdr_v3, ramdisk_size) - 12usize];
    ["Offset of field: boot_img_hdr_v3::os_version"]
        [::core::mem::offset_of!(boot_img_hdr_v3, os_version) - 16usize];
    ["Offset of field: boot_img_hdr_v3::header_size"]
        [::core::mem::offset_of!(boot_img_hdr_v3, header_size) - 20usize];
    ["Offset of field: boot_img_hdr_v3::reserved"]
        [::core::mem::offset_of!(boot_img_hdr_v3, reserved) - 24usize];
    ["Offset of field: boot_img_hdr_v3::header_version"]
        [::core::mem::offset_of!(boot_img_hdr_v3, header_version) - 40usize];
    ["Offset of field: boot_img_hdr_v3::cmdline"]
        [::core::mem::offset_of!(boot_img_hdr_v3, cmdline) - 44usize];
};
impl Default for boot_img_hdr_v3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct vendor_boot_img_hdr_v3 {
    pub magic: [u8; 8usize],
    pub header_version: u32,
    pub page_size: u32,
    pub kernel_addr: u32,
    pub ramdisk_addr: u32,
    pub vendor_ramdisk_size: u32,
    pub cmdline: [u8; 2048usize],
    pub tags_addr: u32,
    pub name: [u8; 16usize],
    pub header_size: u32,
    pub dtb_size: u32,
    pub dtb_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vendor_boot_img_hdr_v3"]
        [::core::mem::size_of::<vendor_boot_img_hdr_v3>() - 2112usize];
    ["Alignment of vendor_boot_img_hdr_v3"]
        [::core::mem::align_of::<vendor_boot_img_hdr_v3>() - 1usize];
    ["Offset of field: vendor_boot_img_hdr_v3::magic"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, magic) - 0usize];
    ["Offset of field: vendor_boot_img_hdr_v3::header_version"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, header_version) - 8usize];
    ["Offset of field: vendor_boot_img_hdr_v3::page_size"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, page_size) - 12usize];
    ["Offset of field: vendor_boot_img_hdr_v3::kernel_addr"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, kernel_addr) - 16usize];
    ["Offset of field: vendor_boot_img_hdr_v3::ramdisk_addr"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, ramdisk_addr) - 20usize];
    ["Offset of field: vendor_boot_img_hdr_v3::vendor_ramdisk_size"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, vendor_ramdisk_size) - 24usize];
    ["Offset of field: vendor_boot_img_hdr_v3::cmdline"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, cmdline) - 28usize];
    ["Offset of field: vendor_boot_img_hdr_v3::tags_addr"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, tags_addr) - 2076usize];
    ["Offset of field: vendor_boot_img_hdr_v3::name"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, name) - 2080usize];
    ["Offset of field: vendor_boot_img_hdr_v3::header_size"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, header_size) - 2096usize];
    ["Offset of field: vendor_boot_img_hdr_v3::dtb_size"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, dtb_size) - 2100usize];
    ["Offset of field: vendor_boot_img_hdr_v3::dtb_addr"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v3, dtb_addr) - 2104usize];
};
impl Default for vendor_boot_img_hdr_v3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct boot_img_hdr_v4 {
    pub _base: boot_img_hdr_v3,
    pub signature_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of boot_img_hdr_v4"][::core::mem::size_of::<boot_img_hdr_v4>() - 1584usize];
    ["Alignment of boot_img_hdr_v4"][::core::mem::align_of::<boot_img_hdr_v4>() - 1usize];
    ["Offset of field: boot_img_hdr_v4::signature_size"]
        [::core::mem::offset_of!(boot_img_hdr_v4, signature_size) - 1580usize];
};
impl Default for boot_img_hdr_v4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct vendor_boot_img_hdr_v4 {
    pub _base: vendor_boot_img_hdr_v3,
    pub vendor_ramdisk_table_size: u32,
    pub vendor_ramdisk_table_entry_num: u32,
    pub vendor_ramdisk_table_entry_size: u32,
    pub bootconfig_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vendor_boot_img_hdr_v4"]
        [::core::mem::size_of::<vendor_boot_img_hdr_v4>() - 2128usize];
    ["Alignment of vendor_boot_img_hdr_v4"]
        [::core::mem::align_of::<vendor_boot_img_hdr_v4>() - 1usize];
    ["Offset of field: vendor_boot_img_hdr_v4::vendor_ramdisk_table_size"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v4, vendor_ramdisk_table_size) - 2112usize];
    ["Offset of field: vendor_boot_img_hdr_v4::vendor_ramdisk_table_entry_num"][::core::mem::offset_of!(
        vendor_boot_img_hdr_v4,
        vendor_ramdisk_table_entry_num
    ) - 2116usize];
    ["Offset of field: vendor_boot_img_hdr_v4::vendor_ramdisk_table_entry_size"][::core::mem::offset_of!(
        vendor_boot_img_hdr_v4,
        vendor_ramdisk_table_entry_size
    ) - 2120usize];
    ["Offset of field: vendor_boot_img_hdr_v4::bootconfig_size"]
        [::core::mem::offset_of!(vendor_boot_img_hdr_v4, bootconfig_size) - 2124usize];
};
impl Default for vendor_boot_img_hdr_v4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Immutable, KnownLayout, IntoBytes, FromBytes, PartialEq, Copy, Clone, Debug)]
pub struct vendor_ramdisk_table_entry_v4 {
    pub ramdisk_size: u32,
    pub ramdisk_offset: u32,
    pub ramdisk_type: u32,
    pub ramdisk_name: [u8; 32usize],
    pub board_id: [u32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vendor_ramdisk_table_entry_v4"]
        [::core::mem::size_of::<vendor_ramdisk_table_entry_v4>() - 108usize];
    ["Alignment of vendor_ramdisk_table_entry_v4"]
        [::core::mem::align_of::<vendor_ramdisk_table_entry_v4>() - 1usize];
    ["Offset of field: vendor_ramdisk_table_entry_v4::ramdisk_size"]
        [::core::mem::offset_of!(vendor_ramdisk_table_entry_v4, ramdisk_size) - 0usize];
    ["Offset of field: vendor_ramdisk_table_entry_v4::ramdisk_offset"]
        [::core::mem::offset_of!(vendor_ramdisk_table_entry_v4, ramdisk_offset) - 4usize];
    ["Offset of field: vendor_ramdisk_table_entry_v4::ramdisk_type"]
        [::core::mem::offset_of!(vendor_ramdisk_table_entry_v4, ramdisk_type) - 8usize];
    ["Offset of field: vendor_ramdisk_table_entry_v4::ramdisk_name"]
        [::core::mem::offset_of!(vendor_ramdisk_table_entry_v4, ramdisk_name) - 12usize];
    ["Offset of field: vendor_ramdisk_table_entry_v4::board_id"]
        [::core::mem::offset_of!(vendor_ramdisk_table_entry_v4, board_id) - 44usize];
};
impl Default for vendor_ramdisk_table_entry_v4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
